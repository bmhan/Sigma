#Notes on the sample code files
7/11/17

4 methods:
        measure_tx
        play_waveform
        setup_vsg
        main

Missing function: 
        dut_start_tx
        //
        DUT Control function w/ frequency and power_level
        //
Need to pipe output of the sample code to an error file
Figure out how to do that. Also, make sure the error measures are from the
original, unedited sample code file (not your calibration file).

overloaded "send" will return a value if there is a "?" mark, indicating that we
will expect a return value. Following the send.

Need to encapsulate the reconfiguration into a setup method, because of overuse
throughout the code.

------------------------------------------------------------------------------
7/13/17

Need to write down all the outputs of Litepoint into the csv file
Requires that we write down all the data point names AND units in the header
Possibly need two headers? (prob not)

BASIC:
Figure out what we need as inputs, and how to build an early version to
accept input

DESIRED:
Use csv to read in the inputs from the excel document, downloading the data
as .csv file, use the inputs we want to adjust the registers as desired, run
the test, store the result of the test into another csv file, making SURE
to include the input information that is relevant so that the data is legible

Questionable:
How much user input do we need (how much to automate?)
Do we rewrite the same file or start a new one?

Using DictReader, each entry in the column is indexed by the name of the column
You can then get the specific values from a column by using the header name
(which makes sense more logically) over accessing them through int index
------------------------------------------------------------------------------

7/14/17

Loop functions properly if no reinitialization is performed (???)

  Answer is not yet; the signal must change

Remember to check if changing the nRB value changes the waveform
  Must wait for the above

Still need to figure out information in TX Power Control Table and TX Power
Control Implementation Notes for more input features.

Question: Do we need to append the files, or do we delete them for each new
iteration?
  Currently, we are appending to the existing files

TODO:
  ? Implement Logic so that in the case of failure, we repeat the test 
  Something like, an if condition, followed by a return of another call to
  measure_tx?
  ?

  Setting 5bc : wr 5bc 2 0 x ( x being from 0 to 7)

TeamViewer:
  ID: 580 951 205
  PW: 8771

------------------------------------------------------------------------------
7/17/17
Implement the Error Code check so that if the license error (or any other error)
is encountered, we rerun the check until it passes

Put the power less into a file, and read that value as the power loss.
Use 11 for now.
Power_Loss_Offset : 11


Implement the reset.

Measure the ACLR: the E-Ultra(///)

Implement the data and time of the test

The Litepoint commands CANNOT Have any spaces

Implement inner for loop with gain sweeping.

Figure out how to get the E-UTRA low and high

#XYB = #288
#228
#248
#513108
  Y has 2 bytes
  B has 8 bytes:


------------------------------------------------------------------------------
7/18/17

Implemented the staggered entry
Implement the Error Code check in case of license error
Implement the date and time of the test
Implement reading power_loss from a file (probably better from user input?)
        Actually, it depends on the exact specific value of the power loss.
Implement an increased number of tests (change the "slot count"?)


Implementing a check to find the correct frequency (within +/- 1000Hz) 

Use strftime to format the date object, which is possible because the date
object is stored in a format that knows which place is every valuelocated.

ADVICE:
        Section 8.4 is chock full of standard procedure and example code

        In rewriting a file, you want to "write" if u want to overwrite the
        file completely. Sometimes u want to do this (the ordered copy of the
        first output file)

        One subframe = 2 timeslots = 1 ms to compute

        We will need to increase the delay as we add more tests
        Looks one "full frame" = 10 subframes + 3 subframes =
        20 time slots + 6 time slots  = 10 ms + 3 ms

        May need to use the below command to increase capture time accordingly
        VSA;CAPTure:TIME <secs>

        Also: Will need possibly add more delay to the Python code, due to delay
        of information transfer, the delay of the capture, the possibly delay
        of information return, and the speed of execution of the next command

        1 6 12 24

Make it so that each time you run the program, you change the name of
the file so you don't constantly have to rename.

Probably going to keep the gain range consistent (4 - 70).

Before you go on, make a new version, because it now revolves around 
        rb_offset and the rb.

See if removing all the print statements significantly improve runtime
speed
(HINT: It probably will)

Do like a prompt: enable comments?


------------------------------------------------------------------------------
7/19/17

GUI

Implement the correct frequency test; currently going from 0 to 1f, and
returning the frequency with the lowest frequency error

PS3648A.py is the file that contains all the functionality for 
our Power Supply

To get pyvisa to work, need to install NI-VISA from National Instruments.


------------------------------------------------------------------------------

7/20/17

To set up the wave form, you need to use CONFigure:WAVE library

lte_waveform_generation.py generates a specific waveform and saves
it to a .igvsg file

lte_load_vsg loads the waveform generated by lte_waveform_generation
into VSG1 in Litepoint. It DOES NOT set up the VSA.

Figure out what all the settings mean

Measure the voltage and current after every calculation!

Play around with the Tkinter Sample Code

Find a way to limit the range of the current for accurate measurement

Uplink v Downlink

The code to format the waveform

Information to put into the chart:
        Take unchanging values and put them at the top of the file
                i.e. time, date, tester, etc...
        Power Supply: VSYS.....
        Temperature
        Tester
        Board (mini-UT)...
        What file used to test this board

Figure out how to write to the CSV file, starting at the top? without 
overwriting the entire file... (like add to the top of the header?)

Update test_crystal script to include test for data EVM
Update test_crystal to store its testing output....

Look at examples of QA Scripts and what their output looks like

------------------------------------------------------------------------------
7/21/17

Added a sleep in between turning on the power supply and initializing the board

Do we want to append the end of an existing file  if the settings are the same?
How do we optimize the testing script in terms of finding the right CSW? What is
our exit condition?   


------------------------------------------------------------------------------
7/24/17

Improve the runtime of test_crystal portion of the test

GUI Notes:

What values can we vary?
        RB / Scale
        RB offset
        Gain range
        5c4 / 5bc
        2c0 (CSW)
        Offsets
        High / Low Power Mode
        PA Bias
        Voltage / Current
        SN
        CABLE_LOSS_DB

What do we need:
        "Start Test" button
        Progress Bar
        Default Settings
        Save / Load Settings
        Checkboxes for mostly unused settings
        Pass / Test Assurance (how do we know based off the results)?
        Error Message (how did the test fail?)

See if we can make a simple GUI, where all the start button does is run
our program.

We are going to have to refactor our code to enable these settings.
We can do, maybe like a dictionary thing, where we read the first value at
every line, which is our key, and the value that follows is our value.
Or, we can just read in each value on each line, and know the indexes so
we can access the data later.

Essentially, what we need is a config file / settings file.

So, it looks like, if we don't do special Tkinter overhead, our data is
printed to terminal just like normal! That is pretty useful!

In more complex automation, we need to check if the device is connected,
using Exceptions to return error messages in the case where devices
are not connected.

It wasn't the writing that took a while; it was the reading!


------------------------------------------------------------------------------
7/25/17

When you make the setter calls inside the GUI, make sure you call it from
an object, so that your changes go through (? Try)

Pretty much everything in the GUI is an object, so if you want to get 
values, you need to use .get and .set

Going to create a "black box" testing program, with just basic queues
to indicate connection failures, and such

We need some kind of console (?) that displays the runtime like I have
already done, but in the GUI instead of on command line

The validate commands do not work "right". It's no longer disabling the button,
but the red text part is working properly
